{"ast":null,"code":"var _jsxFileName = \"/home/nandakishor/works/youtubeClone/youtube/src/components/VideoContainer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { video_API } from './utils/constants';\nimport Videos from './Videos';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoContainer = () => {\n  _s();\n  const [videos, setVideos] = useState([]);\n  useEffect(() => {\n    getVideos();\n  }, []);\n  const getVideos = async () => {\n    const api = await fetch(video_API);\n    const {\n      items\n    } = await api.json();\n    setVideos(items);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-12/12 grid md:grid-cols-4 sm:grid-cols-1\",\n    children: videos.map(data =>\n    // Check if data.id exists\n    data.id && /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/watch?v=\" + (data.id.videoId || data.id.channelId),\n      children: /*#__PURE__*/_jsxDEV(Videos, {\n        info: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }, this)\n    }, data.id.videoId || data.id.channelId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoContainer, \"39g9r2hk3cJXA16k+db4Z3Rqykw=\");\n_c = VideoContainer;\nexport default VideoContainer;\nvar _c;\n$RefreshReg$(_c, \"VideoContainer\");","map":{"version":3,"names":["React","useEffect","useState","video_API","Videos","Link","jsxDEV","_jsxDEV","VideoContainer","_s","videos","setVideos","getVideos","api","fetch","items","json","className","children","map","data","id","to","videoId","channelId","info","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/nandakishor/works/youtubeClone/youtube/src/components/VideoContainer.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { video_API } from './utils/constants';\nimport Videos from './Videos';\nimport { Link } from 'react-router-dom';\n\nconst VideoContainer = () => {\n  const [videos, setVideos] = useState([]);\n\n  useEffect(() => {\n    getVideos();\n  }, []);\n\n  const getVideos = async () => {\n    const api = await fetch(video_API);\n    const { items } = await api.json();\n    setVideos(items);\n  };\n\n  return (\n    <div className='w-12/12 grid md:grid-cols-4 sm:grid-cols-1'>\n      {videos.map((data) => (\n        // Check if data.id exists\n        data.id && (\n          <Link key={data.id.videoId || data.id.channelId} to={\"/watch?v=\" + (data.id.videoId || data.id.channelId)}>\n            <Videos info={data} />\n          </Link>\n        )\n      ))}\n    </div>\n  );\n};\n\nexport default VideoContainer;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,mBAAmB;AAC7C,OAAOC,MAAM,MAAM,UAAU;AAC7B,SAASC,IAAI,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAExCD,SAAS,CAAC,MAAM;IACdW,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAACX,SAAS,CAAC;IAClC,MAAM;MAAEY;IAAM,CAAC,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;IAClCL,SAAS,CAACI,KAAK,CAAC;EAClB,CAAC;EAED,oBACER,OAAA;IAAKU,SAAS,EAAC,4CAA4C;IAAAC,QAAA,EACxDR,MAAM,CAACS,GAAG,CAAEC,IAAI;IACf;IACAA,IAAI,CAACC,EAAE,iBACLd,OAAA,CAACF,IAAI;MAA4CiB,EAAE,EAAE,WAAW,IAAIF,IAAI,CAACC,EAAE,CAACE,OAAO,IAAIH,IAAI,CAACC,EAAE,CAACG,SAAS,CAAE;MAAAN,QAAA,eACxGX,OAAA,CAACH,MAAM;QAACqB,IAAI,EAAEL;MAAK;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC,GADbT,IAAI,CAACC,EAAE,CAACE,OAAO,IAAIH,IAAI,CAACC,EAAE,CAACG,SAAS;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEzC,CAET;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACpB,EAAA,CAzBID,cAAc;AAAAsB,EAAA,GAAdtB,cAAc;AA2BpB,eAAeA,cAAc;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}